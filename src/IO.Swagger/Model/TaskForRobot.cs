/* 
 * Robot vacuum cleaner
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskForRobot
    /// </summary>
    [DataContract]
        public partial class TaskForRobot :  IEquatable<TaskForRobot>, IValidatableObject
    {
        /// <summary>
        /// Defines CleaningMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CleaningModeEnum
        {
            /// <summary>
            /// Enum DRYCLEANING for value: DRY_CLEANING
            /// </summary>
            [EnumMember(Value = "DRY_CLEANING")]
            DRYCLEANING = 1,
            /// <summary>
            /// Enum WETCLEANING for value: WET_CLEANING
            /// </summary>
            [EnumMember(Value = "WET_CLEANING")]
            WETCLEANING = 2        }
        /// <summary>
        /// Gets or Sets CleaningMode
        /// </summary>
        [DataMember(Name="cleaningMode", EmitDefaultValue=false)]
        public CleaningModeEnum? CleaningMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskForRobot" /> class.
        /// </summary>
        /// <param name="robotId">robotId.</param>
        /// <param name="roomId">roomId.</param>
        /// <param name="cleaningMode">cleaningMode.</param>
        /// <param name="id">id.</param>
        /// <param name="task">task.</param>
        /// <param name="dateTimeFrom">dateTimeFrom.</param>
        public TaskForRobot(int? robotId = default(int?), int? roomId = default(int?), CleaningModeEnum? cleaningMode = default(CleaningModeEnum?), int? id = default(int?), string task = default(string), string dateTimeFrom = default(string))
        {
            this.RobotId = robotId;
            this.RoomId = roomId;
            this.CleaningMode = cleaningMode;
            this.Id = id;
            this.Task = task;
            this.DateTimeFrom = dateTimeFrom;
        }
        
        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name="robotId", EmitDefaultValue=false)]
        public int? RobotId { get; set; }

        /// <summary>
        /// Gets or Sets RoomId
        /// </summary>
        [DataMember(Name="roomId", EmitDefaultValue=false)]
        public int? RoomId { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name="task", EmitDefaultValue=false)]
        public string Task { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeFrom
        /// </summary>
        [DataMember(Name="dateTimeFrom", EmitDefaultValue=false)]
        public string DateTimeFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskForRobot {\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  CleaningMode: ").Append(CleaningMode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  DateTimeFrom: ").Append(DateTimeFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskForRobot);
        }

        /// <summary>
        /// Returns true if TaskForRobot instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskForRobot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskForRobot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RobotId == input.RobotId ||
                    (this.RobotId != null &&
                    this.RobotId.Equals(input.RobotId))
                ) && 
                (
                    this.RoomId == input.RoomId ||
                    (this.RoomId != null &&
                    this.RoomId.Equals(input.RoomId))
                ) && 
                (
                    this.CleaningMode == input.CleaningMode ||
                    (this.CleaningMode != null &&
                    this.CleaningMode.Equals(input.CleaningMode))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Task == input.Task ||
                    (this.Task != null &&
                    this.Task.Equals(input.Task))
                ) && 
                (
                    this.DateTimeFrom == input.DateTimeFrom ||
                    (this.DateTimeFrom != null &&
                    this.DateTimeFrom.Equals(input.DateTimeFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RobotId != null)
                    hashCode = hashCode * 59 + this.RobotId.GetHashCode();
                if (this.RoomId != null)
                    hashCode = hashCode * 59 + this.RoomId.GetHashCode();
                if (this.CleaningMode != null)
                    hashCode = hashCode * 59 + this.CleaningMode.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Task != null)
                    hashCode = hashCode * 59 + this.Task.GetHashCode();
                if (this.DateTimeFrom != null)
                    hashCode = hashCode * 59 + this.DateTimeFrom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
